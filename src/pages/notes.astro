---
import Layout from "../layouts/Layout.astro";
---
<Layout title="Gavin - Notes">
    <article>
        <aside class="sidebar">
            <div class="sidebar-tab">
                <ion-icon name="chevron-forward-outline"></ion-icon>
            </div>
            <div class="sidebar-content">
                <!-- Add your sidebar content here -->
            </div>
        </aside>
        <div class="content">
            <section>
                <h1 class="typewriter roboto-bold-italic"></h1>
                <h1 class="roboto-bold">By Gavin</h1>
                <p class="roboto-light">Welcome to my note's / blog section. Here, I like to write about different topics I've been diving into that I find interesting. Some of the topics can be somewhat technical however, I try my best to explain things as clearly as possible using analogies and the occasional drawing.</p>
                <p class="roboto-light">For the most part, I like to use this as a means of reference as well as to really grasp the concepts myself. As a wise man once said, <em class="roboto-italic">"Teaching is the best form of learning".</em></p>
                <p class="roboto-light">With that being said, I do also enjoy teaching people new things and I encourage you to take a look around. Who know's maybe you'll also find something interesting or something that was a little unclear will click.</p>
              </section>
        </div>
    </article>
</Layout>
<script>
    const sidebarContent = document.querySelector(`.sidebar-content`)
    const sidebar = document.querySelector(".sidebar");

    const typewriter = document.querySelector(`.typewriter`)
    const titles = ["Notes", "Blogs"]
    let curTitle = 0;
        const typing = function(title) {
        const time = 1200 / title.length

        let char = 0;
        const int = setInterval(() => {
          typewriter.textContent += title[char]
          char++

          if (typewriter.textContent.length === title.length) {
            clearInterval(int);
            waiting(title)
          }
        }, time);
    }

    const waiting = async function(title) {
        await setTimeout(() => {removing(title)}, 2000)
    }

    const removing = function(title) {
        const time = 1200 / title.length

        let titlelength = title.length
        const int = setInterval(() => {
          titlelength--
          typewriter.textContent = title.substring(0, titlelength)

          if (typewriter.textContent.length === 0) {
            clearInterval(int);
            curTitle++
            if (curTitle === titles.length) curTitle = 0;
            typing(titles[curTitle])
          }
        }, time)
    }

    const blinker = function () {
        setInterval(() => {
            typewriter.style.borderRight = typewriter.style.borderRight === '2px solid var(--font-color)' ? 'none': '2px solid var(--font-color)'
          }, 520)
    }

    document.addEventListener("DOMContentLoaded", () => {
        blinker()
        if (titles.length > 0) {
          //typing animation
          let curTitle = 0;
          typing(titles[curTitle]);
        }
    })

    async function renderSideBar() {
        const response = await fetch("https://api.goiamo.dev/api/notes");
        const topics = await response.json();

        for (const topic of Object.keys(topics)) {
            const topicFormatted = topic
                .split("-")
                .map(topic => topic.replace(topic.charAt(0), topic.charAt(0).toUpperCase()))
                .join(" ");

            // Create sidebar items with correct hierarchy
            sidebarContent.insertAdjacentHTML(
                'beforeend',
                `
                <div class="topic-section">
                    <p class="topic-title ${topic}">${topicFormatted}
                        <ion-icon name="chevron-down-outline"></ion-icon>
                    </p>
                    <ul class="topic-posts"></ul>
                </div>
                `
            );

            const topicTitle = sidebarContent.querySelector(`.${topic}`);
            const ul = topicTitle.nextElementSibling;

            topicTitle.addEventListener(`click`, () => {
                ul.classList.toggle("open");
                topicTitle.classList.toggle("open");
            });

            for (const post of topics[topic]) {
                const postFormatted = post
                    .split("-")
                    .map(post => post.replace(post.charAt(0), post.charAt(0).toUpperCase()))
                    .join(" ")
                    .replace(".html", "");

                ul.insertAdjacentHTML(
                'beforeend',
                    `
                    <li>
                        <a class="post-link" post="${post.replace(".html", "")}" topic="${topic}" href="/notes/${topic}/${post}">${postFormatted}</a>
                    </li>
                    `
                );
            }
        }                

        const postLinks = document.querySelectorAll(`.post-link`)
        postLinks.forEach(post => {
            post.addEventListener(`click`, (e) => {
                e.preventDefault()
                    const post = e.target.getAttribute("post")
                    const topic = e.target.getAttribute("topic")
                    sidebar.classList.toggle("open")
                    loadPost(topic, post)
                })
        })
    }

    async function loadPost(topic, post) {
        const response = await fetch(`https://api.goiamo.dev/api/notes/${topic}/${post}`);
        const { content } = await response.json();

        document.querySelector(".content").innerHTML = content;

        const codeBlocks = document.querySelectorAll(".code")
        codeBlocks.forEach(codeBlock => {
            const codeTabs = codeBlock.querySelectorAll("li")
            const codeSegments = codeBlock.querySelectorAll("pre")

            codeTabs.forEach((codeTab) => {
                codeTab.addEventListener("click", (e) => {
                    codeTabs.forEach((codeTab) => codeTab.classList.remove("active"));
                    codeSegments.forEach((codeTab) => codeTab.classList.remove("active"));

                    e.target.classList.add("active")

                    for (let i = 0; i < codeTabs.length; i++) {
                        if (codeTabs[i].classList.contains("active")) {
                            codeSegments[i].classList.add("active")
                        }
                    }
                })
            })
        })

        const postLinks = document.querySelectorAll(`.post-link`)
        postLinks.forEach(post => {
            post.addEventListener(`click`, (e) => {
                e.preventDefault()
                    const post = e.target.getAttribute("post")
                    const topic = e.target.getAttribute("topic")
                    loadPost(topic, post)
                })
        })
    }

    document.addEventListener(`DOMContentLoaded`, () => {
        renderSideBar()
    })

    document.querySelector(".sidebar-tab").addEventListener("click", () => {
        sidebar.classList.toggle("open");
    });
</script>
<style>
    article section {
        display: flex;
        flex-direction: column;
    }

    article section h1 {
        font-size: var(--s-6);
        text-transform: uppercase;
        padding-top: 0px;
    }

    article section h1:nth-child(1) {
        align-self: flex-start;
        padding-right: 3px;
        height: var(--s-5);
        display: flex;
        align-items: center;
    }

    .sidebar {
        background-color: var(--primary-color);
        position: fixed;
        top: 85px;
        left: 0;
        width: 100%;
        height: calc(100% - 85px);
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        transform: translateX(-100%);
        transition: transform 0.3s ease;
        z-index: 1;
        border-radius: 0px var(--s-2) 0px 0px;
    }

    .sidebar.open {
        transform: translateX(0);
        box-shadow: 5px 0px var(--s-2) rgba(0, 0, 0, 0.2);
    }

    .sidebar-tab {
        background-color: var(--primary-color);
        position: absolute;
        right: -50px;
        height: 50px;
        width: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 0px var(--s-2) var(--s-2) 0px;
        cursor: pointer;
        transition: right 0.3s ease;
        box-shadow: 0px 5px var(--s-2) rgba(0, 0, 0, 0.2);
    }

    .sidebar-tab ion-icon {
        height: var(--s-6);
        width: var(--s-6);
        transition: transform 0.3s ease;
    }

    .sidebar.open .sidebar-tab ion-icon {
        transform: rotate(180deg);
    }

    .sidebar.open .sidebar-tab {
        right: 0px;
        box-shadow: none;
    }

    .sidebar-content {
        display: flex;
        flex-direction: column;
        gap: var(--s-2);
        padding: var(--s-7) var(--s-5);
        font-size: var(--s-5);
        letter-spacing: 1px;
    }

    .content {
        margin-bottom: var(--s-10);
        margin-top: var(--s-13);
        width: 100%;
        padding: var(--s-5);
        display: flex;
        flex-direction: column;
    }

    article {
        margin-top: var(--s-11);
    }

    @media (min-width: 768px) {
        .content {
            padding: var(--s-10) var(--s-12);
        }

        .content p {
            font-size: var(--s-5);
            line-height: var(--s-6);
            padding: var(--s-6) var(--s-2);
        }

        article section h1 {
            font-size: var(--s-7);
        }

        article section h1:nth-child(1) {
            height: var(--s-7);
        }

        .sidebar {
            width: 40vw;
        }

        .sidebar-content {
            padding: var(--s-11) var(--s-5);
            font-size: var(--s-5);
        }

        .sidebar-tab ion-icon {
            height: var(--s-6);
            width: var(--s-6);
        }

        .sidebar-tab {
            height: 75px;
            width: 75px;
            right: -75px;
        }
    }

    @media (min-width: 1024px) {
        .content {
            padding: var(--s-12) var(--s-17);
            gap: var(--s-5);
        }

        .sidebar {
            width: 35vw;
            top: 91px;
        }

        .sidebar-content {
            font-size: var(--s-5);
            padding: var(--s-10) var(--s-7);
        }
    }

    @media (min-width: 1360px) {
        .content {
            padding: var(--s-12) var(--s-35);
            gap: var(--s-5);
        }

        .sidebar {
            width: 20vw;
        }

        .sidebar-content {
            padding: var(--s-11) var(--s-8);
        }
    }
</style>