---
import NotesLayout from "../../../layouts/NotesLayout.astro";
---

<NotesLayout title="Data Structures | Tries">
  <h1 class="roboto-bold title">Tries, Auto-Correct and More</h1>
  <p class="roboto-light">
    Recently at work I was assigned an interesting problem which led to me
    nostalgically reflecting on when I ruthlessly studied data structures to
    prep for CS interviews (exagerating, sort of). The issue we were facing was
    as follows:
  </p>
  <ul class="roboto-light">
    <li>We work with a company that sells tickets</li>
    <li>Customers are required to fill in PII (first name, last name etc)</li>
    <li>When a customer arrives, they scan their ID rather than a ticket</li>
    <li>We parse the information and verify if the customer bought a ticket</li>
    <li>
      However customers were filling in the required information with nicknames
      ("Mike" vs "Michael")
    </li>
  </ul>
  <p class="roboto-light-italic">"...Classic shmoesby"</p>
  <p class="roboto-light">
    All of a sudden, we needed a way to match similar strings or in other words,
    we needed a <span class="roboto-light-italic">fuzzy matcher</span>.
  </p>
  <p>
    It's around here when I started think about how tries are used to search for
    strings and realized that maybe I could use one to implement a custom fuzzy
    matcher. Fuzzy matcher aside though, I figured I'd cover tries are and how
    they work.
  </p>
  <h1 class="roboto-bold">What is a trie?</h1>
  <p>
    Tries are nifty tree-like data structures used for storing and retrieving
    strings. Similar to trees, a trie is made up of nodes however there are a
    few differences compared to say a <a
      href="https://www.programiz.com/dsa/binary-search-tree"
      >Binary Search Tree</a
    >.
  </p>
  <h3>Node definition</h3>
  <ul>
    <li>Can have more than 2 children (typically up to 26 but can vary)</li>
    <li>Has a marker for the end of strings</li>
  </ul>
</NotesLayout>
