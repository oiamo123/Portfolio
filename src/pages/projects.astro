---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import project_data from '../../data/projects.json';
import project_tools from '../../data/project_tools.json';
import tools from '../../data/skills.json';

interface Project {
  id: number;
  tools: string[];
  body: string;
  img: string;
  href: string;
  title: string;
}

const toolsById = new Map(
  tools.skills.map(skill => [Number(skill.id), skill.tool])
);

const projectToolsByProjectId = new Map(
  project_tools.project_tools.map(pt => [Number(pt.ProjectID), pt.ToolIDS])
);

const projects: Project[] = project_data.projects.map(project => {
  const projectId = Number(project.id);
  const toolIds = projectToolsByProjectId.get(projectId) ?? [];
  const toolNames = toolIds
    .map(id => toolsById.get(Number(id))) // also convert here just in case
    .filter(Boolean);

  return {
    ...project,
    id: projectId,
    tools: toolNames,
  };
});
---

<Layout title="Projects - Gavin">
	<article>
		<h1 class="roboto-regular">Projects</h1>
		<div class="projects">
			{projects.map(project => (
				<Card img={project.img} title={project.title} body={project.body} href={project.href} tools={project.tools}></Card>
			))}
		</div>
	</article>
</Layout>
<style>
article {
	margin: 0 auto;
	padding: var(--s-15) var(--s-7);
	min-height: 100vh;
	display: flex;
	flex-direction: column;
	justify-content: center;
}

h1 {
	grid-column: span 2;
	text-transform: uppercase;
	letter-spacing: 2px;
	font-size: var(--s-5);
	position: relative;
}

.projects {
  display: grid;
  grid-template-columns: minmax(auto, var(--s-30));
  justify-content: center;
  gap: var(--s-8);
  margin-top: var(--s-9);
}

@media (min-width: 768px) {
	.projects {
		grid-template-columns: repeat(2, minmax(auto, var(--s-25)));
		grid-template-rows: repeat(auto, 1fr);
		gap: var(--s-10);
	}

	h1 {
		text-align: center;
	}
}

@media (min-width: 1360px) {
	.projects {
		grid-template-columns: repeat(3, minmax(auto, var(--s-30)));
	}
}
</style>